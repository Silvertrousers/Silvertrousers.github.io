{"fullName":"Cyrus Goodarzi","email":"c.goodarzi@gmail.com","headline":"Computer Engineering Student","location":"Imperial College London","summary":"I'm a 3rd Year Student at Imperial College London studying Electronic and Information Engineering. I'm passionate about digital hardware design and computer architecture. \nI have experience in hardware design engineering (Apple) and functional verification (Imagination Technologies).","profilePic":"static/user_profile_images/profilePic.jpg","backgroundPic":null,"educations":[{"fieldOfStudy":"Computer Engineering","description":"","schoolName":"Imperial College London","activities":"Imperial College Mountaineering Club - Team Captain 2021/22\n- Responsible for organising team training sessions, team tryouts and practice competitions as well as boosting team morale\n\nImperial College Mountaineering Club  - Webmaster 2020/21\n- Responsible for making regular posts on the club social media accounts to keep members engaged during the pandemic as well as maintaining and adding articles to the club website","degreeName":"Electronic and Information Engineering","schoolLogo":"static/user_profile_images/Imperial College London-IxZ0c.png","url":"https://www.imperial.ac.uk/","dateRange":{"yearTo":2022,"monthFrom":0,"toPresent":false,"monthTo":0,"yearFrom":2018}}],"jobPositions":[{"dateRange":{"toPresent":true,"monthTo":0,"yearFrom":2021,"monthFrom":"3","yearTo":2021},"companyLogo":"static/user_profile_images/Hardware Design Intern-8-K3F.png","location":"St Albans","companyName":"Apple","title":"Hardware Design Intern","description":"▪\tI designed and debugged RTL modules used for pre-silicon instrumentation for measuring various performance metrics about the design.\n▪\tThis instrumentation was designed to function in both simulation and emulation environments making simulation time and area used important factors.\n▪\tThis involved learning a new GPU architecture by reading architectural and microarchitectural specifications. \n▪\tI wrote scripts to translate complex test vectors for high-level tests into a useable for unit tests.\n","url":"https://www.apple.com/"},{"companyLogo":"static/user_profile_images/Vision and AI Hardware Verification Intern-Y7egz.jpg","url":"https://www.imaginationtech.com/","location":"Kings Langley","title":"Vision and AI Hardware Verification Intern","companyName":"Imagination Technologies","dateRange":{"yearTo":2020,"yearFrom":2020,"toPresent":false,"monthTo":"9","monthFrom":"6"},"description":"▪\tWrote documentation for a testbench qualification workflow for my team.\n▪\tCarried out the qualification of two module level UVM testbenches, creating a coverage review for one them and worked on debugging timeout issues with the other testbench. \n▪\tDebugged a memory arbiter module using its waves files in Verdi and simulation log. \n"},{"location":"Westway Sports and Fitness","dateRange":{"yearFrom":2019,"toPresent":true,"yearTo":2021,"monthFrom":"6","monthTo":0},"companyName":"Everyone Active","title":"Climbing Instructor (Part Time )","companyLogo":"static/user_profile_images/Climbing Instructor (Part Time )-PmB-p.png","url":"https://www.everyoneactive.com/centre/westway-sports-fitness-centre/","description":"▪\tResponsible for coaching groups of up to 6 people of all ages and climbing experience. \n▪\tRequires ability to keep the client engaged and happy, total awareness of my surroundings and the ability to solve problems with client safety quickly and calmly.\n▪\tI have become adept at clear communication with clients as it is key to their safety."}],"projects":[{"title":"Hardware Function Accelerator on FPGA","description":"The aim of the project was to, in pairs, create a custom instruction for the Nios 2 soft processor synthesized on an FPGA. It needed to be able to calculate the result of the following mathematical function as quickly as possible with minimum resource utilization: \n\ny(x) = 0.5*x + x*x*cos((x-128)/128), where x could be any floating-point number. \n\nThe largest part of the design process was designing a block to calculate cos() using the CORDIC algorithm where the internal format of the block should be fixed-point. \nThe fixed point format and number of CORDIC iterations were designed using Monte Carlo Simulation in MATLAB. The architecture of the block also had to be chosen, the two primary options being:\n\n- Rolled: Uses fewer resources, more complicated to design since it requires control logic for which iteration the design is on. \n\n- Unrolled: Allows for pipelining and so higher throughput, multiple CORDIC iterations can be fit into a single pipeline stage and so into a single clock cycle. This allows for both higher throughput and lower latency than the rolled design. \n","dateRange":{"monthFrom":0,"monthTo":"3","yearTo":2021,"toPresent":false,"yearFrom":2021}},{"title":"Architectural Optimization for Smith-Waterman Algorithm","description":"The aim of this coursework was to find the architectural configuration of Simplescalar’s sim-outoforder CPU model that finishes a computation of the Smith-Waterman algorithm using the minimum total energy. \n\nThere were several approaches that could be taken to do so, the main tradeoff to be considered would be the number of parameters that could be tested together vs the simulation time. Before doing any simulation the algorithm was studied and some initial parameters were set. \n\nOther architectural parameters were grouped according to which I thought would interact with each other, like cache line size and associativity. A simulation was run for each set of parameters, iterating over all possible relevant values. \nThese value ranges were also decided upon based on the nature of the program.\n\nThe best configuration was then fixed and used to test the next set of parameters.","dateRange":{"monthFrom":"10","yearTo":2021,"toPresent":false,"yearFrom":2021,"monthTo":"10"}},{"dateRange":{"toPresent":false,"yearFrom":2020,"yearTo":2020,"monthFrom":"2","monthTo":"3"},"description":"During this project, myself and a partner built a compiler that would compile ANSI C code into MIPS 1 machine code. The intention would be that code compiled by the compiler could then be run on the CPU simulator that we built. FLEX and Bison were used to build a lexer and parser respectively. The rest of the compiler to build an abstract syntax tree and traverse the tree to produce machine code was built using C++. \nThis was one of the most challenging projects I've ever done, not only in complexity but also in time pressure, the project was estimated to take 200 man hours and be finished 4 weeks as well as occurring alongside regular courses. ","url":"https://github.com/Silvertrousers/C_Compiler_Coursework","title":"ANSI C Compiler"},{"description":"Lead a team to design and implement a real-time image processing system. \nThe system allows the user to draw a picture on the screen through the detection of an LED “brush” with a camera using different colours and brush sizes. \n\nThis system was implemented using a PYNQ-2 board which contains an FPGA and CPU. There were two overall components of the system, brush detection and the canvas output and maintenance. The brush detection was implemented using high level sysnthesis (HLS) in C and was configured on the FPGA. This block in the FPGA was then called by a python script running on the CPU.","dateRange":{"yearTo":2019,"monthFrom":"3","monthTo":"5","yearFrom":2019,"toPresent":false},"title":"Real-Time Image Processor"},{"description":"In order to learn about the MIPS instruction set architecture (ISA) and ISA's in general myself and a partner built a MIPS 1 CPU Simulator in C++. This requried the implementation of 50 instructions, a memory system, register system and program counter. The simulator needed to be able to take a MIPS 1 binary, execute it and produce the correct results as well as take command line input and output to the command line. \n\nThe other major component of the project was to build a testbench for our simulator. Our approach was to handwrite a set of test programs for each instruction and run them using a bash script. The script compares the output of the simulator to the precalculated expected output. ","url":"https://github.com/Silvertrousers/MIPS_CPU_Simulator","dateRange":{"yearTo":2020,"monthFrom":"1","monthTo":"2","yearFrom":2020,"toPresent":false},"title":"MIPS 1 CPU Simulator and Testbench"}],"contacts":[{"name":"Email","url":"c.goodarzi@gmail.com"},{"url":"07808843756","name":"Phone"},{"url":"https://www.linkedin.com/in/cyrus-goodarzi-577a54185/","name":"LinkedIn"},{"url":"https://github.com/Silvertrousers","name":"GitHub"}],"skills":[{"name":"System Verilog and Verilog"},{"name":"C++"},{"name":"MATLAB"},{"name":"Python"},{"name":"Indago Debug Analyzer"},{"name":"Perforce"},{"name":"MIPS 1 Instruction Set"},{"name":"ARM Instruction Set"},{"name":"Bash"},{"name":"Git"},{"name":"Linux Command Line"},{"name":"Quartus Prime"},{"name":"SimVision Debug"}]}
